import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:fl_chart/fl_chart.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  String stockSymbol = "AAPL";
  List<double> stockData = [];

  Future<void> fetchData() async {
    final response = await http.get( "https://api.polygon.io/v2/aggs/ticker/AAPL/range/1/day/2023-01-09/2023-01-09?adjusted=true&sort=asc&limit=120&apiKey=gwCZOLQwD7mD16qnO93FDaHkmk87Xar4");

    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      setState(() {
        stockData = List.from(data["results"]).map((e) => e["l"].toDouble()).toList();
      });
    } else {
      print("Failed to fetch data");
    }
  }

  @override
  void initState() {
    super.initState();
    fetchData();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Stock Price Chart'),
        ),
        body: Column(
          children: [
            Text('Stock Symbol: $stockSymbol'),
            ElevatedButton(
              onPressed: () {
                fetchData();
              },
              child: Text('Refresh Data'),
            ),
            Expanded(
              child: LineChart(
                LineChartData(
                  gridData: FlGridData(show: false),
                  titlesData: FlTitlesData(leftTitles: SideTitles(showTitles: false)),
                  borderData: FlBorderData(show: false),
                  minX: 0,
                  maxX: stockData.length.toDouble() - 1,
                  minY: stockData.isEmpty ? 0 : stockData.reduce((a, b) => a < b ? a : b),
                  maxY: stockData.isEmpty ? 100 : stockData.reduce((a, b) => a > b ? a : b),
                  lineBarsData: [
                    LineChartBarData(
                      colors: [Color(#ff0000ff)],
                      isCurved: false,
                      spots: stockData.asMap().entries.map((e) {
                        return FlSpot(e.key.toDouble(), e.value);
                      }).toList(),
                      isStrokeCapRound: true,
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
